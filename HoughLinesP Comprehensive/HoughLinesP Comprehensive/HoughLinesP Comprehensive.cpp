// HoughLinesP Comprehensive.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <opencv2/opencv.hpp>
#include <iostream>

using namespace cv;
using namespace std;


//-------------全局变量声明---------
Mat g_srcImage, g_dstImage, g_tmpImage;
vector<Vec4i> g_lines;//定义一个矢量结构g_lines用于存放得到的线段矢量集合
int g_nthreshold = 100;//变量接收的TrackBar位置参数


//------------全局函数声明-------------
static void on_HoughLines(int, void*);




int main()
{
	//改变系统颜色
	system("color 2F");

	//载入原始图像并显示
	Mat g_srcImage = imread("1.jpg");
	imshow("【原图】", g_srcImage);

	//创建滚动条
	namedWindow("【效果图】", 1);
	createTrackbar("值", "【效果图】", &g_nthreshold, 200, on_HoughLines);

	//进行边缘检测和转化为灰度图
	Canny(g_srcImage, g_tmpImage, 50, 200, 3);//进行一次Canny检测
	cvtColor(g_tmpImage, g_dstImage, COLOR_GRAY2BGR);//转化边缘检测后的图为灰度图

	//调用一次回调函数，调用一次HoughLinesP函数
	on_HoughLines( g_nthreshold, 0 );
	HoughLinesP(g_tmpImage, g_lines, 1, CV_PI/180, 80, 50, 10);

	//显示效果图
	imshow("【效果图】", g_dstImage);


	waitKey(0);
    return 0;
}


//---------【on_HoughLines函数】----------
//顶帽运算、黑帽运算 窗口回调函数
static void on_HoughLines(int, void*) 
{
	//用局部变量存储全局变量
	Mat dstImage = g_dstImage.clone();
	Mat tmpImage = g_tmpImage.clone();


	//调用HoughLinesP函数
	vector<Vec4i>mylines;
	HoughLinesP(tmpImage, mylines, 1, CV_PI/180, g_nthreshold + 1, 50, 10);

	//循环遍历每一条线段
	for (size_t i = 0; i < mylines.size(); i++)
	{
		Vec4i l = mylines[i];
		line(dstImage, Point(l[0], l[1]), Point(l[2], l[3]), Scalar(23, 180, 55), 1, CV_AA);

	}
	//显示图像
	imshow("【效果图】", dstImage);

}
